[{"content":"Building Linux Kernel The process of building a Linux Kernel can be performed in several steps, but it may take time as per your hardware capabilities.\nStep 1: Download the Source Code Visit the Official Kernel Website and download the latest kernel source code. The downloaded files contains a compressed source code that you need to extract it.\nStep 2: Extract the Source Code After downloading, it is necessary to extract the source code. So, we will achieve this using tar command.\ntar xvf linux-6.13.tar.xz If you don\u0026rsquo;t have tar, then download it using command:\nsudo pacman -S tar Note: It is recommended to download the latest kernel source code and write it\u0026rsquo;s version correctly while using tar command.\nStep 3: Install the Required Packages Make sure you have additional packages to start compilation. To achieve this, you need to install the following packages:\nsudo pacman -S git fakeroot ncurses xz bc flex bison base-devel kmod cpio perl binutils util-linux jfsutils e2fsprogs xfsprogs squashfs-tools quota-tools Step 4: Configure your kernel Navigate to linux-6.13 folder: cd linux-6.13 Configue your kernel. It is recommended to use your current system\u0026rsquo;s configuration as a base. So write the following commands in order: Use the following commad if you have zcat: zcat /proc/config.gz \u0026gt; .config Else you have to use following commands to simply copying config file: cp /proc/config.gz ./ gunzip ./config.gz mv config .config Use the following commands to open a menu-driven interface to customize kernel options:\nmake menuconfig make xconfig `make oldconfig` Make some changes in .config file:\nOpen it using command(you can use vim, kate, nano or any other text editor): sudo vim .config Make following changes:\nsearch for CONFIG_EXT4_FS=m and set it to CONFIG_EXT4_FS=y.\nStep 5: Start compilation Check for available processing CPU Cores using command: nproc Note then n number of cores shown on the screen\nInitiate the compilation process: make -jn Replace n with number of cores that you found using nproc command\nAnd now your Kernel starts compiling\nIf any issue persists during or after running make -jn, then make a back up of .config file and run the command:\nmake mrproper make mrproper resets your entire broken tree back to the initial state.\nStep 6: Install Modules Insalling Kernel Modules are mandatory and they enhances the kernel\u0026rsquo;s capabilities, hardware support and other features while maintaining system stability and efficiency. You can install kernel modules using commad:\nsudo make modules_install Step 7: Install Kernel The following are two different methods to install Kernel. Use the first method. If it doesn\u0026rsquo;t work, then use the second method carefully:\nDirectly install through one command: sudo make install Use three commands properly and carefully: Copy the Kernel Image: sudo cp arch/x86/boot/bzImage /boot/vmlinuz-linux-custom Copy the System.map file: sudo cp System.map /boot/System.map-linux-custom Copy the configuration file: sudo cp .config /boot/config-linux-custom Step 8: Update the Bootloader Depending on your bootloader, you will need to add an entry for the new kernel. I am adding entry for GRUB as I uses it.\nRun the following command to know the UUID of your root partition (it will be in ext4 file system and have the mounting point as /) and copy it: lsblk -f Open the file using command: sudo nvim /etc/grub.d/40_custom Add the following content to the above mentioned file at the end: menuentry \u0026#39;Custom Linux Kernel\u0026#39; { linux /boot/vmlinuz-linux-custom root=UUID=paste-your-root-partition-uuid-here initrd /boot/initramfs-linux.img } Step 9: Generate Initramfs Generating Initramfs is necessary as you have compiled a new custom kernel, installed kernel modules, updated kernel configuration and updated bootloader. It is crucial for boot system. Use the command and make sure to input the correct version as I mentioned 6.13:\nsudo mkinitcpio -k 6.13-custom -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-custom.img Step 10: Update GRUB configuration Use the following command to update it as it will detect our new custom kernel:\nsudo grub-mkconfig -o /boot/grub/grub.cfg That\u0026rsquo;s it. Configuration, you successfully build, compiled and installed your custom Kernel. Enjoy\n","permalink":"http://localhost:1313/posts/kernel-compilation/","summary":"\u003ch2 id=\"building-linux-kernel\"\u003eBuilding Linux Kernel\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eThe process of building a Linux Kernel can be performed in several steps, but it may take time as per your hardware capabilities.\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"step-1-download-the-source-code\"\u003eStep 1: Download the Source Code\u003c/h3\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://www.kernel.org/\"\u003eOfficial Kernel Website\u003c/a\u003e and download the latest kernel source code. The downloaded files contains a compressed source code that you need to extract it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"step-2-extract-the-source-code\"\u003eStep 2: Extract the Source Code\u003c/h3\u003e\n\u003cp\u003eAfter downloading, it is necessary to extract the source code. So, we will achieve this using \u003cstrong\u003etar\u003c/strong\u003e command.\u003c/p\u003e","title":"Compile and Build Linux Kernel"},{"content":"Understanding GRUB Rescue and How to Fix It (A Guide to Diagnosing and Resolving Boot Errors)\nIntroduction GRUB (Grand Unified Bootloader) is a critical component of Linux systems, responsible for loading the operating system. However, encountering the GRUB rescue prompt can be alarming. This blog explains why this happens and provides two practical methods to resolve it.\nWhy Does GRUB Rescue Appear? The GRUB rescue prompt appears when the bootloader fails to locate critical files or configurations. Common causes include:\nCorrupted or Broken GRUB Installation: Occurs after interrupted updates or failed OS installations. Incorrect Partition Changes: Modifying disk partitions (e.g., deleting/resizing) can break GRUBâ€™s path. Missing OS or Boot Files: Accidental deletion of /boot or misconfigured kernel updates. Disk Errors: Hardware failures or filesystem corruption. Method 1: On-the-Spot Fix Using GRUB Rescue Commands If you have access to the GRUB rescue prompt, try these steps:\nStep 1: Identify Partitions List available partitions using:\nls Step 2: Locate the Boot Partition Check each partition for the /boot/grub directory:\nls (hdX,msdosY)/boot/grub Continue this process until you locate the /boot/grub directory. Then, replace X (disk number) and Y (partition number) based on your system.\nStep 3: Set the Correct Root and Prefix Set the correct root and prefix:\nset root=(hdX,msdosY) set prefix=(hdX,msdosY)/boot/grub Step 4: Load the Normal Modules insmod normal normal This should bring up the standard GRUB menu, allowing you to boot into your operating system.\nStep 5: Reinstall GRUB Once booted, it\u0026rsquo;s crucial to reinstall GRUB to prevent future issues:\nsudo grub-mkconfig -o /boot/grub/grub.cfg It generated grub configuration file for arch-based distros, for debian based distros, you can use the following command:\nsudo grub-update Now reinstall the GRUB Bootloader to the specified disk:\nsudo grub-install /dev/sdaX It is recommended to regenerate the grub configuration after this step.\nMethod 2: GRUB Setup using a Live USB This method involves booting into a Live USB environment, mounting the necessary partitions, and reinstalling GRUB manually. Follow these steps carefully:\nStep 1: Boot into Live USB Create a Live USB using tools like Rufus or BalenaEtcher. Boot into the Live environment by selecting the USB drive in your BIOS/UEFI menu. Step 2: Identify Partitions Use lsblk to list all disks and partitions:\nlsblk Step3: Mount the root partition Mounts the root partition (/dev/nvme0n1p4) to the /mnt directory. Replace /dev/nvme0n1p4 with your actual root partition identifier.\nsudo mount /dev/nvme0n1p4 /mnt Step 4: Mount the boot partition Mounts the boot partition (/dev/nvme0n1p3) to /mnt/boot. Adjust /dev/nvme0n1p3 to match your boot partition.\nsudo mount /dev/nvme0n1p3 /mnt/boot Step 5: Bind Mount System Directories Bind /dev, /proc, /sys, and EFI variables to the chroot environment:\ni: /dev directory Bind the /dev directory to /mnt/dev for device access in the chroot environment.\nsudo mount - -bind /dev /mnt/dev ii: /proc directory Bind the /proc directory to /mnt/proc for process information.\nsudo mount --bind /proc /mnt/proc iii: /sys directory Bind the /sys directory to /mnt/sys for system information.\nsudo mount - -bind /sys /mnt/sys iv: efi variables Binds EFI variables to /mnt/sys/firmware/efi/efivars for UEFI systems.\nsudo mount - -bind /sys/firmware/efi/efivars /mnt/sys/firmware/efi/efivars v: /dev/pts (optional for nvme or gpt file systems) If your system uses the pts filesystem or you want a pseudo-terminal support.\nsudo mount --bind /dev/pts /mnt/dev/pts Step 6: Chroot into the System Switches the root directory to /mnt, allowing you to work on the installed system. Enter the chroot environment:\nsudo chroot /mnt Step 7: Reinstall GRUB Install the GRUB bootloader for UEFI systems, specifying the target architecture, EFI directory, and a bootloader identifier.\nsudo grub-install - -target=x86_64-efi - -efi-directory=/boot/efi - -bootloader-id=GRUB Step 8: Generate GRUB Configuration file Generate a new GRUB configuration file, detecting available operating systems and kernels.\nsudo grub-mkconfig -o /boot/grub/grub.cfg Step 9: Exit chroot Environment Exits the chroot environment, returning to the Live USB session.\nexit Step 9: Unmount Filesystems Recursively unmounts all filesystems mounted under /mnt.\nsudo umount -R /mnt Step 10: Reboot the System Restarts the system. Remove the Live USB to boot into your repaired system.\nreboot Step 11: Regenerate GRUB Configuration File After booting into your system, it\u0026rsquo;s advisable to regenerate the GRUB configuration file to ensure all operating systems are detected:\nsudo grub-mkconfig -o /boot/grub/grub.cfg Step 12: Reboot sudo reboot now Facing the \u0026ldquo;grub rescue\u0026rdquo; prompt can be resolved using methods like insmod or a Live USB. Utilize the Arch Linux community, forums, and the Arch Wiki for support. Proactively addressing boot issues and leveraging resources ensures a stable system. Seek help or consult documentation for further assistance.\n","permalink":"http://localhost:1313/posts/grub-rescue-setup/","summary":"\u003ch1 id=\"understanding-grub-rescue-and-how-to-fix-it\"\u003eUnderstanding GRUB Rescue and How to Fix It\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003e(A Guide to Diagnosing and Resolving Boot Errors)\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eGRUB (Grand Unified Bootloader) is a critical component of Linux systems, responsible for loading the operating system. However, encountering the \u003cstrong\u003eGRUB rescue prompt\u003c/strong\u003e can be alarming. This blog explains why this happens and provides two practical methods to resolve it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"why-does-grub-rescue-appear\"\u003eWhy Does GRUB Rescue Appear?\u003c/h2\u003e\n\u003cp\u003eThe GRUB rescue prompt appears when the bootloader fails to locate critical files or configurations. Common causes include:\u003c/p\u003e","title":"Grub Rescue Setup"}]