[{"content":"Building Linux Kernel The process of building a Linux Kernel can be performed in several steps, but it may take time as per your hardware capabilities.\nStep 1: Download the Source Code Visit the Official Kernel Website and download the latest kernel source code. The downloaded files contains a compressed source code that you need to extract it.\nStep 2: Extract the Source Code After downloading, it is necessary to extract the source code. So, we will achieve this using tar command.\ntar xvf linux-6.13.tar.xz\nIf you don\u0026rsquo;t have tar, then download it using command:\nsudo pacman -S tar\nNote: It is recommended to download the latest kernel source code and write it\u0026rsquo;s version correctly while using tar command.\nStep 3: Install the Required Packages Make sure you have additional packages to start compilation. To achieve this, you need to install the following packages:\nsudo pacman -S git fakeroot ncurses xz bc flex bison base-devel kmod cpio perl binutils util-linux jfsutils e2fsprogs xfsprogs squashfs-tools quota-tools\nStep 4: Configure your kernel Navigate to linux-6.13 folder: cd linux-6.13\nConfigue your kernel. It is recommended to use your current system\u0026rsquo;s configuration as a base. So write the following commands in order: Use the following commad if you have zcat: zcat /proc/config.gz \u0026gt; .config\nElse you have to use following commands to simply copying config file:\ncp /proc/config.gz ./\ngunzip ./config.gz\nmv config .config\nUse the following commands to open a menu-driven interface to customize kernel options:\nmake menuconfig\nmake xconfig\nmake oldconfig\nMake some changes in .config file:\nOpen it using command(you can use vim, kate, nano or any other text editor):\nsudo vim .config\nMake following changes:\nsearch for CONFIG_EXT4_FS=m and set it to CONFIG_EXT4_FS=y.\nStep 5: Start compilation Check for available processing CPU Cores using command: nproc\nNote then number of cores shown on the screen\nInitiate the compilation process: make -jn\nReplace n with number of cores that you found using nproc command\nAnd now your Kernel starts compiling\nIf any issue persists during or after running make -jn, then make a back up of .config file and run the command:\nmake mrproper\nmake mrproper resets your entire broken tree back to the initial state.\nStep 6: Install Modules Insalling Kernel Modules are mandatory and they enhances the kernel\u0026rsquo;s capabilities, hardware support and other features while maintaining system stability and efficiency. You can install kernel modules using commad:\nsudo make modules_install\nStep 7: Install Kernel The following are two different methods to install Kernel. Use the first method. If it doesn\u0026rsquo;t work, then use the second method carefully:\nDirectly install through one command: sudo make install\nUse three commands properly and carefully: Copy the Kernel Image:\nsudo cp arch/x86/boot/bzImage /boot/vmlinuz-linux-custom\nCopy the System.map file:\nsudo cp System.map /boot/System.map-linux-custom\nCopy the configuration file:\nsudo cp .config /boot/config-linux-custom\nStep 8: Update the Bootloader Depending on your bootloader, you will need to add an entry for the new kernel. I am adding entry for GRUB as I uses it.\nRun the following command to know the UUID of your root partition (it will be in ext4 file system and have the mounting point as /) and copy it: lsblk -f\nOpen the file using command: sudo nvim /etc/grub.d/40_custom\nAdd the following content to the above mentioned file at the end: menuentry 'Custom Linux Kernel' { linux /boot/vmlinuz-linux-custom root=UUID=paste-your-root-partition-uuid-here initrd /boot/initramfs-linux.img }\nStep 9: Generate Initramfs Generating Initramfs is necessary as you have compiled a new custom kernel, installed kernel modules, updated kernel configuration and updated bootloader. It is crucial for boot system. Use the command and make sure to input the correct version as I mentioned 6.13:\nsudo mkinitcpio -k 6.13-custom -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-custom.img\nStep 10: Update GRUB configuration Use the following command to update it as it will detect our new custom kernel:\nsudo grub-mkconfig -o /boot/grub/grub.cfg\nThat\u0026rsquo;s it. Configuration, you successfully build, compiled and installed your custom Kernel. Enjoy\n","permalink":"http://localhost:1313/posts/kernel-compilation/","summary":"\u003ch2 id=\"building-linux-kernel\"\u003eBuilding Linux Kernel\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eThe process of building a Linux Kernel can be performed in several steps, but it may take time as per your hardware capabilities.\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"step-1-download-the-source-code\"\u003eStep 1: Download the Source Code\u003c/h3\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://www.kernel.org/\"\u003eOfficial Kernel Website\u003c/a\u003e and download the latest kernel source code. The downloaded files contains a compressed source code that you need to extract it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"step-2-extract-the-source-code\"\u003eStep 2: Extract the Source Code\u003c/h3\u003e\n\u003cp\u003eAfter downloading, it is necessary to extract the source code. So, we will achieve this using \u003cstrong\u003etar\u003c/strong\u003e command.\u003c/p\u003e","title":"Compile and Build Linux Kernel"}]